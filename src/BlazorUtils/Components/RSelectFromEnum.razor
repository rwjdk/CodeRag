@typeparam T
@* ReSharper disable CSharpWarnings::CS8619 *@
@* ReSharper disable CSharpWarnings::CS8620 *@
<MudSelect Dense="true"
           T="T"
           Value="@Value"
           Label="@Label"
           Variant="@Variant"
           Margin="@Margin"
           ValueChanged="@ValueChanged"
           Clearable="@Clearable"
           Required="@Required"
           Class="@Class"
           Style="@Style">
    @* ReSharper restore CSharpWarnings::CS8620 *@
    @* ReSharper restore CSharpWarnings::CS8619 *@
    @{
        Type enumType = typeof(T);
        if (enumType.IsEnum || IsNullableEnum(out enumType))
        {
            Array items = Enum.GetValues(enumType);

            @if (items.Length > 0)
            {
                foreach (object? item in items)
                {
                    var val = (T)item;
                    if (ValuesToExclude.Contains(val))
                    {
                        continue;
                    }
                    <MudSelectItem T="T" Value="val">
                        @{
                            Enum e = (Enum)item;
                            var description = e.Description();
                            if (string.IsNullOrWhiteSpace(description))
                            {
                                description = e.ToString();
                            }
                        }
                        @description
                    </MudSelectItem>
                }
            }
        }
    }
</MudSelect>

@code {

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public T[] ValuesToExclude { get; set; } = [];

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public Margin Margin { get; set; } = Margin.Dense;

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public bool Clearable { get; set; }

    [Parameter]
    public bool Required { get; set; }

    private bool IsNullableEnum(out Type enumType)
    {
        enumType = Nullable.GetUnderlyingType(typeof(T))!;
        return enumType.IsEnum;
    }

}