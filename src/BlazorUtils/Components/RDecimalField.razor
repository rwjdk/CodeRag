@using System.Linq.Expressions
<MudNumericField @ref="_element"
                 T="decimal?"
                 Value="@Value"
                 Label="@Label"
                 Variant="@Variant"
                 Margin="@Margin"
                 Class="@Class"
                 Style="@Style"
                 Required="@Required"
                 ValueChanged="@ValueChanged"
                 HideSpinButtons="@HideSpinButtons"
                 Min="@Min"
                 Max="@Max"
                 Format="@Format"
                 Clearable="@Clearable"
                 Step="@Step"
                 ReadOnly="@ReadOnly"
                 Disabled="@Disabled"
                 For="For"/>

@code {
    private MudNumericField<decimal?>? _element;

    [Parameter]
    public decimal? Value { get; set; }

    [Parameter]
    public decimal Step { get; set; } = 1;

    [Parameter]
    public decimal Min { get; set; } = decimal.MinValue;

    [Parameter]
    public decimal Max { get; set; } = decimal.MaxValue;

    [Parameter]
    public EventCallback<decimal?> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }
    
    [Parameter]
    public string? Format { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public Margin Margin { get; set; } = Margin.Dense;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public bool Disabled { get; set; }
    
    [Parameter]
    public bool Clearable { get; set; }
    
    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public Expression<Func<decimal?>>? For { get; set; }

    [Parameter]
    public bool HideSpinButtons { get; set; }

    //ReSharper disable once UnusedMember.Global
    public async Task SetFocusAsync()
    {
        if (_element != null)
        {
            await _element.FocusAsync();
        }
    }

}