@using System.Linq.Expressions
@* ReSharper disable CSharpWarnings::CS8619 *@
@* ReSharper disable CSharpWarnings::CS8620 *@
<MudTextField @ref="_element"
              Value="@Value"
              Label="@Label"
              Variant="@Variant"
              Margin="@Margin"
              ValueChanged="@ValueChanged"
              TextChanged="@TextChanged"
              Clearable="@Clearable"
              AdornmentIcon="@AdornmentIcon"
              Adornment="@Adornment"
              DebounceInterval="@DebounceInterval"
              OnDebounceIntervalElapsed="OnDebounceIntervalElapsed"
              Class="@Class"
              Style="@Style"
              Placeholder="@Placeholder"
              Lines="@Lines"
              AutoFocus="@AutoFocus"
              AutoGrow="@AutoGrow"
              @onfocus="OnFocus"
              @onfocusout="OnFocusOut"
              Required="@Required"
              Validation="Validation"
              Immediate="@Immediate"
              Disabled="@Disabled"
              FullWidth="@FullWidth"
              OnAdornmentClick="@OnAdornmentClick"
              OnKeyUp="@OnKeyUp"
              OnKeyDown="@OnKeyDown"
              InputType="@InputType"
              TextUpdateSuppression="@TextUpdateSuppression"
              For="For" />
@* ReSharper restore CSharpWarnings::CS8620 *@
@* ReSharper restore CSharpWarnings::CS8619 *@

@code {
    private MudTextField<string>? _element;

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public object? Validation { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnDebounceIntervalElapsed { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnAdornmentClick { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyUp { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnFocusOut { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public Margin Margin { get; set; } = Margin.Dense;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public bool Clearable { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public bool Immediate { get; set; }

    [Parameter]
    public int Lines { get; set; } = 1;

    [Parameter]
    public string? AdornmentIcon { get; set; }

    [Parameter]
    public Adornment Adornment { get; set; } = Adornment.None;

    [Parameter]
    public Expression<Func<string?>>? For { get; set; }

    [Parameter]
    public bool AutoGrow { get; set; }

    [Parameter]
    public bool AutoFocus { get; set; }

    [Parameter]
    public bool TextUpdateSuppression { get; set; } = true;

    [Parameter]
    public double DebounceInterval { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter] public InputType InputType { get; set; } = InputType.Text;

    // ReSharper disable once UnusedMember.Global
    public async Task SetFocusAsync()
    {
        if (_element != null)
        {
            await _element.FocusAsync();
        }
    }

    public async Task Clear()
    {
        if (_element != null)
        {
            await _element.Clear();
        }
    }

}