@using System.Linq.Expressions
@* ReSharper disable CSharpWarnings::CS8619 *@
@* ReSharper disable CSharpWarnings::CS8620 *@
<MudNumericField @ref="_element"
                 T="int"
                 Value="@Value"
                 Label="@Label"
                 Variant="@Variant"
                 Margin="@Margin"
                 Class="@Class"
                 Style="@Style"
                 HideSpinButtons="@HideSpinButtons"
                 Required="@Required"
                 ValueChanged="@ValueChanged"
                 Disabled="@Disabled"
                 Min="@Min"
                 Max="@Max"
                 For="For"/>
@* ReSharper restore CSharpWarnings::CS8620 *@
@* ReSharper restore CSharpWarnings::CS8619 *@

@code {
    private MudNumericField<int>? _element;

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public int Min { get; set; } = int.MinValue;

    [Parameter]
    public int Max { get; set; } = int.MaxValue;

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public Margin Margin { get; set; } = Margin.Dense;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public bool HideSpinButtons { get; set; }

    [Parameter]
    public Expression<Func<int>>? For { get; set; }

    //ReSharper disable once UnusedMember.Global
    public async Task SetFocusAsync()
    {
        if (_element != null)
        {
            await _element.FocusAsync();
        }
    }

}