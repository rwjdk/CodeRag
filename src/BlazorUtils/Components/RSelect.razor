@typeparam T
<MudSelect Dense="true"
           Disabled="@Disabled"
           T="T?"
           Value="@Value"
           Label="@Label"
           Variant="@Variant"
           HelperText="@HelperText"
           Margin="@Margin"
           ValueChanged="@ValueChanged"
           Clearable="@Clearable"
           Style="@Style">
    @if (Items.Any())
    {
        foreach (T item in Items)
        {
            <MudSelectItem T="T" Value="item">
                @if (ToStringFunc != null)
                {
                    @(ToStringFunc(item))
                }
                else
                {
                    @(item!.ToString())
                }
            </MudSelectItem>
        }
    }
</MudSelect>

@code {
    [Parameter] public required Func<T?, string>? ToStringFunc { get; set; }
    [Parameter, EditorRequired] public required IEnumerable<T> Items { get; set; }
    [Parameter] public T? Value { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? HelperText { get; set; }

    [Parameter]
    public bool Disabled { get; set; }
    [Parameter] public EventCallback<T?> ValueChanged { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public Margin Margin { get; set; } = Margin.Dense;
    [Parameter] public string? Style { get; set; }
    [Parameter] public bool Clearable { get; set; }
}